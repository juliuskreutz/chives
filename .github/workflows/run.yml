on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:

name: Run

jobs:
  run:
    name: Run
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2

      - name: Get Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Run Script
        run: cargo run

      - name: Delete Tag
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT }}
          retries: 3
          script: |
            github.rest.git.deleteRef({
                owner,
                repo,
                ref: "tags/latest",
            })

      - name: Create Tag
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT }}
          retries: 3
          script: |
            await github.rest.git.createRef({
                owner,
                repo,
                ref: "refs/tags/latest",
                sha: context.sha,
            })

      - name: Delete Release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT }}
          retries: 3
          script: |
            const { data: { id } } = await github.rest.repos.getLatestRelease({ owner, repo })
            await github.rest.repos.deleteRelease({ owner, repo, release_id: id })

      - name: Create Release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT }}
          retries: 3
          script: |
            await github.rest.repos.createRelease({
                owner,
                repo,
                tag_name: "latest",
                name: "Latest Release",
                body: "Latest Release",
                draft: false
            })

      - name: Upload Csv
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT }}
          retries: 3
          script: |
            const { data: { id } } = await github.rest.repos.getLatestRelease({ owner, repo })

            const fs = require("fs")
            const data = fs.readFileSync("chives.csv", "utf8")

            await github.rest.repos.uploadReleaseAsset({
                owner,
                repo,
                release_id: id,
                name: "chives.csv",
                data
            })
